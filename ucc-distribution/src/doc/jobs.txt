[[ucc_jobs]]
Running jobs
------------

Introduction
~~~~~~~~~~~~
  
The UCC can run jobs specified in the JSON job description format that
is used by the UNICORE REST API, plus a few extensions related to
handling of local files, submission options etc. See
xref:ucc_jobdescription[] for all the details.

In the following it is assumed that you have UCC installed
xref:ucc_install[] and tried some examples xref:ucc_quickstart[] .

For example, assume the file "myjob.u" looks as follows

--------------
{
 "ApplicationName": "Date", 
 "ApplicationVersion": "1.0"
}
--------------

To run this through UCC, issue the following command
  
-------------
ucc run myjob.u
-------------
  
This will submit the job, wait for completion, download the stdout and
stderr files, and place them in your default output directory. The run
command has a number of options, to see all the possibilities use the
built-in help:

-------------
ucc run -h
-------------


==== Controlling the output location and file names

Output files will be placed in the directory given by the "-o" option, if not given, the current
directory is used. Also, file names will be put into a subdirectory named as the job id, 
to prevent accidental overwriting of existing files. This behaviour can be changed using the "-b" 
option. When "-b" is given on the command line, no subdirectory will be created.

==== Specifying the site

In the example above, a random site will be chosen to execute the job. To control it, you can use the "-s" option.
This will accept the name of a target system. The target systems available to you can be listed by

----------
ucc list-sites
---------


==== Accessing a job's working directory

Using the UCC's data management functions, the job working directory can be accessed at any time
after job submission. Please see section xref:ucc_datamanagement[] for details.

Options overview
~~~~~~~~~~~~~~~~

The following options are available when running jobs (see also the general options overview in xref:ucc_options[].

.Job submission options for UCC
[width="100%",cols="<30%m,<70%",frame="topbot",options="header"]
|=======================
|Option (Short and long form)    |Description
| -a,--asynchronous | Run asynchronously 
| -b,--brief |  Do not create a sub-directory for output files
| -B,--broker |  Select the type of resource broker to use (see 'run -h' for a list)
| -d,--dryRun |  Only show candidate sites, but do not submit the job
| -s,--sitename <SITE>  | Site where the job shall be run
| -S,--schedule <Time>  | Schedule the submission of the job at the given time
| -o,--output <Output_dir> | Directory for any output produced (default is the current directory)
| -O,--stdout <stdout_name> |  specify a name for the exported standard out (by default: 'stdout') 
| -E,--stderr <stderr_name> | specify a name for the exported standard error (by default: 'stderr') 
|=======================  

  
Resource selection
~~~~~~~~~~~~~~~~~~

In general the user selects the execution site.

If no site is specified upon submission, UCC will select a matching site, where
the requirements (resources, applications) are met.

In case there are other types of brokers available, they can be
selected using the "-B" or "--broker" option.

 * LOCAL (default): brokering is done by UCC itself

To see if other brokers exist, execute "ucc run -h", the available options will be listed
in the help for the "-B" option.

Processing jobs asynchronously  
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In case of long-running jobs, you will want to run the job asynchronously, i.e. just submit the job,
stage in any files and start it, in order to get the results later. UCC supports this, of course.
The basic idea is that when submitting a job in asynchronous mode, 
a job descriptor file is written that contains the job's address, and 
any information about export files.

==== Asynchronous submission

Use the "-a" flag when submitting a job
  
--------------
ucc run -a <job file>
--------------

This will submit the job, stage-in any local files, start the job and exit.
A job descriptor file (ending in ".job") will be written to your configured output
directory.

==== Get the status of particular jobs

The command 
--------------
ucc job-status <job_desc> <job_desc_2> ...
--------------

will retrieve the status of the given jobs. If not given on the command line, a 
job ID will be read from the console.
  

==== Download results
    
To get stdout, stderr and other files you have marked for export in your link:jobs.html[job description],
do 

--------------
ucc get-output -o <outdir> <job_desc>
--------------
  
Here, the option "-o" specifies the directory where to put the output, by default the current
directory is used. As before, the job address can also be read from the console.
  
==== Referencing a job by its URL (endpoint address)

In case you want to check on a job not submitted through UCC, or in case you do not
have the job descriptor file any more, you can also refer to a job given its URL.
The "list-jobs" command will produce a list of all job URLs that you can 
access.

Note that in this case UCC will only retrieve stdout and stderr files. To download
other result files, you'll have to use the data movement functions described 
in xref:ucc_datamanagement[].

  
==== Scheduling job submission to the batch system

Sometimes a user wishes to control the time when a job is
submitted to the batch queue, for example because she knows that
a certain queue will be empty at that time.

To schedule a job, you can either use the "-S" option to the ucc "run"
command:

----------------
ucc run -S "12:24" ...
----------------

Alternatively, you can specify the start time in your job file using the "Not before" key word

--------------
{

 "Not before": "12:30",

}
--------------

In both cases, the specified start time can be given in the brief "HH:mm" (hours and minutes) 
format shown above, or in the full ISO 8601 format including year, date, time and time zone:

--------------
{

 "Not before": "2011-12-24T12:30:00+0200",

}
--------------


Executing a command
~~~~~~~~~~~~~~~~~~~

If you just want to execute a simple command remotely (i.e. without data staging, 
resource specifications etc), you can use the "exec" command. 

This will run the given command remotely (similarly to "ssh"), and print the 
output to the console. You can specify the site with the "-s" option.
If you do not specify the site, a random site will be chosen.

UNICORE will run the command on the login node, it will not be submitted to the 
batch system.

For example, try

--------------
ucc exec /bin/date
--------------

Watch out to properly escape any arguments, in order not to interfere with the 
arguments to UCC.

